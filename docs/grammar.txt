program =
	variable definition
	| structure declaration
	| function declaration;

variable definition = "let", identifier, "=", expression;
structure declaration =
	"structure", identifier,
		identifier,
		{identifier},
	"end";
function declaration =
	"function", identifier, "(", [identifier, {",", identifier}], ")",
		statement list,
	"end";

statement list = statement, {statement};
statement =
	variable definition
	| assignment
	| condition
	| loop
	| loop continue
	| loop break
	| function return
	| expression;
assignment = expression, "=", expression;
condition =
	"if", expression, "then",
		statement list,
	{"else", "if", expression, "then",
		statement list},
	["else",
		statement list],
	"end";
loop =
	"while", expression, "do",
		statement list,
	"end";
loop continue = "continue";
loop break = "break";
function return = "return", [expression];

expression = disjunction;
disjunction = conjunction, {"or", conjunction};
conjunction = equality, {"and", equality};
equality = comparison, {("==" | "/="), comparison};
comparison = sum, {("<" | "<=" | ">" | ">="), sum};
sum = product, {("+" | "-"), product};
product = unary, {("*" | "/" | "%"), unary};
unary =
	array sized definition
	| structure definition
	| ({"-" | "not"}, accessor);

array sized definition = "new", "array", "(", expression, ")";
structure definition = "new", identifier;
accessor = atom, {array item access | structure field access};
array item access = "[", expression, "]";
structure field access = ".", identifier;

atom =
	null definition
	| number
	| identifier
	| array listed definition
	| string definition
	| function call
	| ("(", expression, ")");
null definition = "NULL";
array listed definition = "[", [expression, {",", expression}], "]";
function call = identifier, "(", [expression, {",", expression}], ")";

number = ? /'(\\.|[^'])'/ ? | ? /\d+(\.\d+)?/ ?;
identifier = ? /[a-z_]\w*/i ? - key words;
string definition = ? /"(\\.|[^"])*"/ ?;

key words =
	"and"
	| "break"
	| "continue"
	| "do"
	| "else"
	| "end"
	| "function"
	| "if"
	| "include"
	| "let"
	| "new"
	| "not"
	| "note"
	| "NULL"
	| "or"
	| "return"
	| "structure"
	| "then"
	| "while";
